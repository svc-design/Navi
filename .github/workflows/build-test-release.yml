name: Build & Test & Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux
            os: ubuntu-latest
            arch: amd64
          - platform: macos
            os: macos-latest
            arch: arm64
          - platform: windows
            os: windows-latest
            arch: amd64
    env:
      GOOS: ${{ fromJson('{"linux":"linux","macos":"darwin","windows":"windows"}')[matrix.platform] }}
      GOARCH: ${{ matrix.arch }}
      CGO_ENABLED: 1
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: engine/go.mod
          cache: true
      - run: make deps-go
      - run: make test-go
        if: matrix.arch == 'amd64'
      - name: Build library
        run: |
          mkdir -p app
          make build-go GOOS=${{ env.GOOS }} GOARCH=${{ env.GOARCH }}
          case "${{ matrix.platform }}" in
            linux)   LIB=libnavi_engine.so ;;
            macos)   LIB=libnavi_engine.dylib ;;
            windows) LIB=navi_engine.dll ;;
          esac
          NAME="navi-${{ matrix.platform }}-${{ matrix.arch }}"
          mkdir -p "package/$NAME"
          mv app/"$LIB" "package/$NAME/"
          if [ "${{ matrix.platform }}" = "windows" ]; then
            (cd package && 7z a "$NAME.zip" "$NAME")
            echo "ARTIFACT=$PWD/package/$NAME.zip" >> $GITHUB_ENV
          else
            tar -C package -czf "package/$NAME.tar.gz" "$NAME"
            echo "ARTIFACT=$PWD/package/$NAME.tar.gz" >> $GITHUB_ENV
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: navi-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ env.ARTIFACT }}

  unit-tests:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, macos, windows]
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: macos
            os: macos-latest
          - platform: windows
            os: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: engine/go.mod
          cache: true
      - run: make test-go

  fixtures:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [linux, macos, windows]
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: macos
            os: macos-latest
          - platform: windows
            os: windows-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          echo "TODO: add mock and fixture generation"

  release:
    needs: [unit-tests, fixtures]
    if: ${{ always() && needs.unit-tests.result == 'success' && needs.fixtures.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Decide tag (use pushed tag or create daily tag in UTC)
        id: meta
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF_NAME}"
            TITLE="Release ${GITHUB_REF_NAME}"
            PRERELEASE="false"
          else
            TAG="daily-$(date -u +%Y%m%d)-${GITHUB_RUN_NUMBER}"
            TITLE="Daily Build ${GITHUB_RUN_NUMBER} (UTC $(date -u +%Y-%m-%d))"
            PRERELEASE="true"
          fi
          echo "tag_name=${TAG}" >> "$GITHUB_OUTPUT"
          echo "release_name=${TITLE}" >> "$GITHUB_OUTPUT"
          echo "prerelease=${PRERELEASE}" >> "$GITHUB_OUTPUT"
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag_name }}
          name: ${{ steps.meta.outputs.release_name }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
